// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// pars2pik
arma::mat pars2pik(arma::vec pars, NumericVector nsnps, NumericVector rg_vec, bool rg);
RcppExport SEXP _cophescan_pars2pik(SEXP parsSEXP, SEXP nsnpsSEXP, SEXP rg_vecSEXP, SEXP rgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nsnps(nsnpsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rg_vec(rg_vecSEXP);
    Rcpp::traits::input_parameter< bool >::type rg(rgSEXP);
    rcpp_result_gen = Rcpp::wrap(pars2pik(pars, nsnps, rg_vec, rg));
    return rcpp_result_gen;
END_RCPP
}
// logsumexp
double logsumexp(arma::rowvec x);
RcppExport SEXP _cophescan_logsumexp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(logsumexp(x));
    return rcpp_result_gen;
END_RCPP
}
// logpost
arma::mat logpost(arma::vec pars, arma::mat lbf_mat, NumericVector nsnps, NumericVector rg_vec, bool rg);
RcppExport SEXP _cophescan_logpost(SEXP parsSEXP, SEXP lbf_matSEXP, SEXP nsnpsSEXP, SEXP rg_vecSEXP, SEXP rgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lbf_mat(lbf_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nsnps(nsnpsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rg_vec(rg_vecSEXP);
    Rcpp::traits::input_parameter< bool >::type rg(rgSEXP);
    rcpp_result_gen = Rcpp::wrap(logpost(pars, lbf_mat, nsnps, rg_vec, rg));
    return rcpp_result_gen;
END_RCPP
}
// loglik
double loglik(arma::vec pars, arma::mat lbf_mat, NumericVector nsnps, NumericVector rg_vec, bool rg);
RcppExport SEXP _cophescan_loglik(SEXP parsSEXP, SEXP lbf_matSEXP, SEXP nsnpsSEXP, SEXP rg_vecSEXP, SEXP rgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lbf_mat(lbf_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nsnps(nsnpsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rg_vec(rg_vecSEXP);
    Rcpp::traits::input_parameter< bool >::type rg(rgSEXP);
    rcpp_result_gen = Rcpp::wrap(loglik(pars, lbf_mat, nsnps, rg_vec, rg));
    return rcpp_result_gen;
END_RCPP
}
// posterior
arma::mat posterior(arma::vec pars, arma::mat lbf_mat, NumericVector nsnps, NumericVector rg_vec, bool rg);
RcppExport SEXP _cophescan_posterior(SEXP parsSEXP, SEXP lbf_matSEXP, SEXP nsnpsSEXP, SEXP rg_vecSEXP, SEXP rgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lbf_mat(lbf_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nsnps(nsnpsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rg_vec(rg_vecSEXP);
    Rcpp::traits::input_parameter< bool >::type rg(rgSEXP);
    rcpp_result_gen = Rcpp::wrap(posterior(pars, lbf_mat, nsnps, rg_vec, rg));
    return rcpp_result_gen;
END_RCPP
}
// sample_alpha
arma::vec sample_alpha(int n);
RcppExport SEXP _cophescan_sample_alpha(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_alpha(n));
    return rcpp_result_gen;
END_RCPP
}
// sample_beta
arma::vec sample_beta(int n);
RcppExport SEXP _cophescan_sample_beta(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_beta(n));
    return rcpp_result_gen;
END_RCPP
}
// sample_gamma
arma::vec sample_gamma(int n);
RcppExport SEXP _cophescan_sample_gamma(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_gamma(n));
    return rcpp_result_gen;
END_RCPP
}
// logd_alpha
double logd_alpha(double a, double mean, double sd, bool log);
RcppExport SEXP _cophescan_logd_alpha(SEXP aSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(logd_alpha(a, mean, sd, log));
    return rcpp_result_gen;
END_RCPP
}
// logd_beta
double logd_beta(double b);
RcppExport SEXP _cophescan_logd_beta(SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(logd_beta(b));
    return rcpp_result_gen;
END_RCPP
}
// logd_gamma
double logd_gamma(double g);
RcppExport SEXP _cophescan_logd_gamma(SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(logd_gamma(g));
    return rcpp_result_gen;
END_RCPP
}
// logpriors
double logpriors(arma::vec pars, bool rg);
RcppExport SEXP _cophescan_logpriors(SEXP parsSEXP, SEXP rgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< bool >::type rg(rgSEXP);
    rcpp_result_gen = Rcpp::wrap(logpriors(pars, rg));
    return rcpp_result_gen;
END_RCPP
}
// target
double target(arma::vec pars, arma::mat lbf_mat, NumericVector nsnps, NumericVector rg_vec, bool rg);
RcppExport SEXP _cophescan_target(SEXP parsSEXP, SEXP lbf_matSEXP, SEXP nsnpsSEXP, SEXP rg_vecSEXP, SEXP rgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lbf_mat(lbf_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nsnps(nsnpsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rg_vec(rg_vecSEXP);
    Rcpp::traits::input_parameter< bool >::type rg(rgSEXP);
    rcpp_result_gen = Rcpp::wrap(target(pars, lbf_mat, nsnps, rg_vec, rg));
    return rcpp_result_gen;
END_RCPP
}
// propose
arma::vec propose(arma::vec pars, double propsd);
RcppExport SEXP _cophescan_propose(SEXP parsSEXP, SEXP propsdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< double >::type propsd(propsdSEXP);
    rcpp_result_gen = Rcpp::wrap(propose(pars, propsd));
    return rcpp_result_gen;
END_RCPP
}
// pars_init
arma::vec pars_init(bool rg);
RcppExport SEXP _cophescan_pars_init(SEXP rgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type rg(rgSEXP);
    rcpp_result_gen = Rcpp::wrap(pars_init(rg));
    return rcpp_result_gen;
END_RCPP
}
// metrop_run
List metrop_run(arma::mat lbf_mat, NumericVector nsnps, NumericVector rg_vec, bool rg, int nits, int thin);
RcppExport SEXP _cophescan_metrop_run(SEXP lbf_matSEXP, SEXP nsnpsSEXP, SEXP rg_vecSEXP, SEXP rgSEXP, SEXP nitsSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type lbf_mat(lbf_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nsnps(nsnpsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rg_vec(rg_vecSEXP);
    Rcpp::traits::input_parameter< bool >::type rg(rgSEXP);
    Rcpp::traits::input_parameter< int >::type nits(nitsSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(metrop_run(lbf_mat, nsnps, rg_vec, rg, nits, thin));
    return rcpp_result_gen;
END_RCPP
}
// post_prob
List post_prob(arma::mat params, arma::mat lbf_mat, NumericVector nsnps, NumericVector rg_vec, bool rg);
RcppExport SEXP _cophescan_post_prob(SEXP paramsSEXP, SEXP lbf_matSEXP, SEXP nsnpsSEXP, SEXP rg_vecSEXP, SEXP rgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lbf_mat(lbf_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nsnps(nsnpsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rg_vec(rg_vecSEXP);
    Rcpp::traits::input_parameter< bool >::type rg(rgSEXP);
    rcpp_result_gen = Rcpp::wrap(post_prob(params, lbf_mat, nsnps, rg_vec, rg));
    return rcpp_result_gen;
END_RCPP
}
// piks
List piks(arma::mat params, NumericVector nsnps, NumericVector rg_vec, bool rg);
RcppExport SEXP _cophescan_piks(SEXP paramsSEXP, SEXP nsnpsSEXP, SEXP rg_vecSEXP, SEXP rgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nsnps(nsnpsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rg_vec(rg_vecSEXP);
    Rcpp::traits::input_parameter< bool >::type rg(rgSEXP);
    rcpp_result_gen = Rcpp::wrap(piks(params, nsnps, rg_vec, rg));
    return rcpp_result_gen;
END_RCPP
}
// average_post
arma::mat average_post(List posterior, int nits, int thin);
RcppExport SEXP _cophescan_average_post(SEXP posteriorSEXP, SEXP nitsSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type posterior(posteriorSEXP);
    Rcpp::traits::input_parameter< int >::type nits(nitsSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(average_post(posterior, nits, thin));
    return rcpp_result_gen;
END_RCPP
}
// average_pik
arma::mat average_pik(arma::mat params, NumericVector nsnps, NumericVector rg_vec, int nits, int thin, bool rg);
RcppExport SEXP _cophescan_average_pik(SEXP paramsSEXP, SEXP nsnpsSEXP, SEXP rg_vecSEXP, SEXP nitsSEXP, SEXP thinSEXP, SEXP rgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nsnps(nsnpsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rg_vec(rg_vecSEXP);
    Rcpp::traits::input_parameter< int >::type nits(nitsSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< bool >::type rg(rgSEXP);
    rcpp_result_gen = Rcpp::wrap(average_pik(params, nsnps, rg_vec, nits, thin, rg));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cophescan_pars2pik", (DL_FUNC) &_cophescan_pars2pik, 4},
    {"_cophescan_logsumexp", (DL_FUNC) &_cophescan_logsumexp, 1},
    {"_cophescan_logpost", (DL_FUNC) &_cophescan_logpost, 5},
    {"_cophescan_loglik", (DL_FUNC) &_cophescan_loglik, 5},
    {"_cophescan_posterior", (DL_FUNC) &_cophescan_posterior, 5},
    {"_cophescan_sample_alpha", (DL_FUNC) &_cophescan_sample_alpha, 1},
    {"_cophescan_sample_beta", (DL_FUNC) &_cophescan_sample_beta, 1},
    {"_cophescan_sample_gamma", (DL_FUNC) &_cophescan_sample_gamma, 1},
    {"_cophescan_logd_alpha", (DL_FUNC) &_cophescan_logd_alpha, 4},
    {"_cophescan_logd_beta", (DL_FUNC) &_cophescan_logd_beta, 1},
    {"_cophescan_logd_gamma", (DL_FUNC) &_cophescan_logd_gamma, 1},
    {"_cophescan_logpriors", (DL_FUNC) &_cophescan_logpriors, 2},
    {"_cophescan_target", (DL_FUNC) &_cophescan_target, 5},
    {"_cophescan_propose", (DL_FUNC) &_cophescan_propose, 2},
    {"_cophescan_pars_init", (DL_FUNC) &_cophescan_pars_init, 1},
    {"_cophescan_metrop_run", (DL_FUNC) &_cophescan_metrop_run, 6},
    {"_cophescan_post_prob", (DL_FUNC) &_cophescan_post_prob, 5},
    {"_cophescan_piks", (DL_FUNC) &_cophescan_piks, 4},
    {"_cophescan_average_post", (DL_FUNC) &_cophescan_average_post, 3},
    {"_cophescan_average_pik", (DL_FUNC) &_cophescan_average_pik, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_cophescan(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
